
            this.setState((previousState) => {

              console.log('this is i,j going into set state',i,j)

              console.log('This is the bean index going into set state',previousState.tileDataSource[i][j].i)

              const newData = previousState.tileDataSource

              console.log('The Bean Index for This Element Shoud now be',newData[i][j].i)

              var x = newData.map((row,n) => {

                let y = row.map((e,m) => {

                if (n == i && m == j) {
                return <Tile update = {this.updateGrid.bind(this)}
                location = {e.location} key = {m} i = {e.i}
                subviews = {e.view} />}
                else {
                  return this.state.gridItems[n][m]
                }

              })
                // This is where the error occurs where an element no longer receives touches.
                // Don't wrap this in a view.
                return y})






              return {gridItems: x}})


              <TouchableHighlight style = {styles.container} onPress = {this.layoutGrid.bind(this)}>
              <Text style = {styles.text}> {this.state.textShit} </Text>
              </TouchableHighlight>


              <TouchableHighlight onPress = {this.reColorGrid.bind(this)}>
              <Text> Recolor The Grid </Text>
              </TouchableHighlight>
              <TouchableHighlight onPress = {this.animateTilesToLocations.bind(this)}>
              <Text> AnimateTiles </Text>
              </TouchableHighlight>



              Animated.parallel([
                      Animated.spring(            //Step 1
                          this.state.tileDataSource[i][j].location,         //Step 2
                          {toValue: {x: TILE_WIDTH*i+TILE_WIDTH*dx, y: TILE_WIDTH*j+TILE_WIDTH*dy } }     //Step 3
                      ),
                      Animated.spring(            //Step 1
                          this.state.tileDataSource[i+dx][j+dy].location,         //Step 2
                          {toValue: {x: TILE_WIDTH*i, y: TILE_WIDTH*j } }     //Step 3
                        )

                      ]).start()




                                            <TouchableHighlight onPress = {this.reColorGrid.bind(this)}>
                                            <Text> Recolor The Grid </Text>
                                            </TouchableHighlight>
                                            <TouchableHighlight onPress = {this.animateTilesToLocations.bind(this)}>
                                            <Text> AnimateTiles </Text>
                                            </TouchableHighlight>



                                            var arr = this.state.tileDataSource.map((row,i) => {

                                              let rows = row.map((e,j) => {

                                                let element = [i,j]

                                                let x = indexesToColor.filter(e => {return (i==e[0] && j==e[1])})
                                                console.log('does the neighbor include the element being examined',i,j,x.length)

                                                if (x.length != 0)
                                                {
                                                  console.log('I have found a neighbor with an index that needs updating')
                                                  return <Tile update = {this.updateGrid.bind(this)}
                                                   location = {e.location} scale = {e.scale} key = {j} i = {e.i} subview = {e.view} />
                                                }
                                                else {
                                                  return this.state.tileComponents[i][j]
                                                }

                                              })

                                              // This is where the error occurs where an element no longer receives touches.
                                              // Don't wrap this in a view.
                                              return rows})

                                              this.setState({tileComponents: arr})



                                              // Depracated
                                              find2DIndex(array2D,element) {

                                                for (var i = 0; i < array2D.length; i++)
                                                {

                                                  let column = array2D[i]
                                                    for (var j = 0; j < column.length; j++)
                                                    {
                                                      if (column[j] == element)
                                                      {
                                                        return [i,j]
                                                      }
                                                    }
                                                }
                                                return (10,10)
                                              }


                                              <View style = {styles.jamJars} >
                                                <Image source = {RedJam} style = {styles.jam}/>
                                                <Image source = {RedJam} style = {styles.jam}/>
                                                <Image source = {RedJam} style = {styles.jam}/>
                                                <Image source = {RedJam} style = {styles.jam}/>
                                                <Image source = {RedJam} style = {styles.jam}/>
                                                <Image source = {RedJam} style = {styles.jam}/>
                                                <Image source = {RedJam} style = {styles.jam}/>

                                              </View>



                                                // Determines if the tile at location i,j has a neighbor of the same color.
                                                hasNeighbor(i, j) {
                                                  // Tile data source dependency
                                                  var { tileDataSource } = this.state;

                                                  let hasANeighbor = false;
                                                  var neighbors = Array();

                                                  let l = 1;
                                                  let r = 1;
                                                  let u = 1;
                                                  let d = 1;

                                                  if (i <= 0) {
                                                    l = 0;
                                                  }

                                                  if (i >= 4) {
                                                    r = 0;
                                                  }

                                                  if (j <= 0) {
                                                    u = 0;
                                                  }

                                                  if (j >= 4) {
                                                    d = 0;
                                                  }

                                                  let spots = [l, r, u, d];
                                                  let spotsLength = spots.length;

                                                  // Checking for edge cases.
                                                  for (let m = 0; m < spotsLength; m++) {
                                                    // Spots tells us which neighbors are available to check based on edge cases.
                                                    // If it's zero, that means that that particular spot lands is not valid and we should not check it.
                                                    if (spots[m] != 0) {
                                                      // left
                                                      if (m == 0) {
                                                        // Push the left tile to the array of spots to check.
                                                        neighbors.push(tileDataSource[i - 1][j]);
                                                      }
                                                      // right
                                                      if (m == 1) {
                                                        neighbors.push(tileDataSource[i + 1][j]);
                                                      }
                                                      // up
                                                      if (m == 2) {
                                                        neighbors.push(tileDataSource[i][j - 1]);
                                                      }
                                                      // down
                                                      if (m == 3) {
                                                        neighbors.push(tileDataSource[i][j + 1]);
                                                      }
                                                    }
                                                  }
                                                  var neighborsLength = neighbors.length;

                                                  for (var n = 0; n < neighborsLength; n++) {
                                                    if (neighbors[n].imageType == tileDataSource[i][j].imageType) {
                                                      hasANeighbor = true;
                                                    } else if (
                                                      isJam(neighbors[n].imageType) &&
                                                      isJam(tileDataSource[i][j].imageType)
                                                    ) {
                                                      hasANeighbor = true;
                                                    }
                                                  }

                                                  return hasANeighbor;
                                                }



                                                  allHaveNeighbors(indexes) {
                                                    let len = indexes.length;

                                                    let theyAreAllNeighbors = true;

                                                    for (var n = 0; n < len; n++) {
                                                      let i = indexes[n][0];
                                                      let j = indexes[n][1];

                                                      if (this.hasNeighbor(i, j) == false) {
                                                        theyAreAllNeighbors = false;
                                                      }
                                                    }

                                                    return theyAreAllNeighbors;
                                                  }



                                                    consecutiveJams() {
                                                      let data = this.state.tileDataSource;

                                                      let horizontalJams = 0;

                                                      let columnsOfJam = 0;

                                                      let rowsequencesOfJam = [[]];

                                                      let colsequencesOfJam = [[]];

                                                      let rowsequenceToAdd = [];

                                                      let colsequenceToAdd = [];

                                                      for (i = 0; i < 5; i++) {
                                                        for (j = 0; j < 5; j++) {
                                                          //Find all columns
                                                          if (isJam(data[i][j].imageType)) {
                                                            horizontalJams++;
                                                            rowsequenceToAdd.push([i, j]);
                                                          } else {
                                                            if (horizontalJams >= 3) {
                                                              rowsequencesOfJam.push(rowsequenceToAdd);
                                                            }
                                                            horizontalJams = 0;
                                                            rowsequenceToAdd = [];
                                                          }

                                                          //Find all rows
                                                          if (isJam(data[j][i].imageType)) {
                                                            columnsOfJam++;
                                                            colsequenceToAdd.push([j, i]);
                                                          } else {
                                                            if (columnsOfJam >= 3) {
                                                              colsequencesOfJam.push(colsequenceToAdd);
                                                            }
                                                            columnsOfJam = 0;
                                                            colsequenceToAdd = [];
                                                          }
                                                        }
                                                      }

                                                      let filteredTotal = [];

                                                      let total = [...colsequencesOfJam, ...rowsequencesOfJam];

                                                      console.log(
                                                        "This is the total inside consecutiveJams before filtering",
                                                        total
                                                      );

                                                      // Double Check this
                                                      for (i = 0; i < total.length; i++) {
                                                        if (total[i].length != 0) {
                                                          for (j = 0; j < total[i].length; j++) {
                                                            filteredTotal.push(total[i][j]);
                                                          }
                                                        }
                                                      }

                                                      console.log(
                                                        "This is the filteredTotal inside consecutiveJams",
                                                        filteredTotal
                                                      );

                                                      return filteredTotal;
                                                    }



                                                    duplicates(matches) {
                                                      let stream = [];

                                                      matches.map(row => {
                                                        row.map(e => {
                                                          stream.push(e);
                                                        });
                                                      });

                                                      let dups = stream.map(e => {
                                                        let count = stream.filter(a => areIndexesEqual(a, e)).length;
                                                        console.log("this is e in dups", e);
                                                        if (count > 1) {
                                                          if (shareIndex()) return e;
                                                        } else {
                                                          return [];
                                                        }
                                                      });

                                                      return dups;
                                                    }


                                                    /* Remove the spot where the jar needs to go
                                                    secondMatchesPerpedicularToSwipe = secondMatchesPerpedicularToSwipe.filter(
                                                      e => {
                                                        let firstAreEqual = e[0] == spotForSecondObject[0];
                                                        let secondAreEqual = e[1] == spotForSecondObject[1];
                                                        b = !(firstAreEqual && secondAreEqual);

                                                        return b;
                                                      }
                                                    );
                                                    */

                                                    /*
                                                    allMatches.map(match => {
                                                      let filteredMatch = match.filter(e => {
                                                        let firstAreEqual = e[0] == match[0];
                                                        let secondAreEqual = e[1] == match[1];
                                                        let boolean = !(firstAreEqual && secondAreEqual);

                                                        return boolean;
                                                      });
                                                      filteredMatches.push(filteredMatch);
                                                      return;
                                                    });
                                                */


                                                    let matchCounts = this.state.tileDataSource.map(row => {
                                                      let x = row.map(e => {
                                                        return e.matchMemberships;
                                                      });
                                                      return x;
                                                    });
